// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  clerkId      String   @unique
  displayName  String
  profileImage String?
  lineId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

   // ユーザーが参加している旅行（多対多関係）
  travels TravelUser[]

  @@map("users")
}

model Travel {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  destination String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 旅行に参加しているユーザー（多対多関係）
  users TravelUser[]
  
  // 旅行の行程表（一対多関係）
  itineraries Itinerary[]

  @@map("travels")
}

model TravelUser {
  id       String @id @default(cuid())
  userId   String
  travelId String
  joinedAt DateTime   @default(now())

  // リレーション
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  travel Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)

  @@unique([userId, travelId]) // 同じユーザーが同じ旅行に重複参加しないように
  @@map("travel_users")
}

model Itinerary {
  id          String    @id @default(cuid())
  travelId    String
  title       String
  description String?
  location    String?
  startTime   DateTime?
  endTime     DateTime?
  day         Int? // 旅行の何日目か
  order       Int? // 同じ日の中での順序
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // リレーション
  travel Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}